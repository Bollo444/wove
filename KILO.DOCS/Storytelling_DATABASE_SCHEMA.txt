This schema aims for a balance between normalization and practicality, with considerations for future scalability and query performance.

```sql
-- Enum Types for consistency and data integrity
CREATE TYPE age_tier AS ENUM ('kids', 'teens', 'adults', 'unverified');
CREATE TYPE story_status AS ENUM ('draft', 'in_progress', 'completed', 'archived', 'pending_approval');
CREATE TYPE collaboration_role AS ENUM ('author', 'editor', 'reader', 'owner');
CREATE TYPE verification_method AS ENUM ('google_sso', 'parental_consent_email', 'id_document', 'credit_card_check');
CREATE TYPE verification_status AS ENUM ('pending', 'verified', 'rejected', 'expired');
CREATE TYPE media_type AS ENUM ('image', 'video_clip', 'audio_theme', 'audio_sfx', 'visual_effect_config');
CREATE TYPE segment_author_type AS ENUM ('user', 'ai');
CREATE TYPE notification_type AS ENUM ('new_turn', 'story_invite', 'story_completed', 'mention', 'report_update');

-- Main Tables

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    hashed_password TEXT, -- Nullable if using SSO exclusively for some users
    username VARCHAR(50) UNIQUE,
    date_of_birth DATE,
    current_age_tier age_tier DEFAULT 'unverified',
    verified_age_tier age_tier DEFAULT 'unverified',
    google_id VARCHAR(255) UNIQUE, -- For Google Sign-In
    is_email_verified BOOLEAN DEFAULT FALSE,
    preferences JSONB, -- e.g., UI theme, notification settings, default style
    parental_monitoring_enabled BOOLEAN DEFAULT FALSE, -- For child accounts
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE age_verification_requests (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    method verification_method NOT NULL,
    status verification_status DEFAULT 'pending',
    submitted_data JSONB, -- Store non-PII metadata about submission, or encrypted reference
    evidence_url TEXT, -- Securely stored, access-controlled URL if applicable
    reviewed_by_admin_id UUID REFERENCES users(id), -- If manual review
    notes TEXT,
    requested_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE parental_links (
    parent_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    child_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    consent_status verification_status DEFAULT 'pending',
    consent_granted_at TIMESTAMPTZ,
    PRIMARY KEY (parent_user_id, child_user_id)
);

CREATE TABLE story_premises_library (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    genre VARCHAR(100),
    themes TEXT[], -- Array of theme keywords
    target_age_tier age_tier NOT NULL,
    cover_art_url TEXT,
    opening_music_theme_preview_url TEXT,
    visual_effect_theme_preview_data JSONB,
    created_by_admin_id UUID REFERENCES users(id), -- Optional: if admin curated
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE stories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT NOT NULL,
    premise_id UUID REFERENCES story_premises_library(id), -- If started from library
    custom_premise TEXT, -- If not from library
    creator_id UUID NOT NULL REFERENCES users(id) ON DELETE RESTRICT, -- User who initiated
    current_age_tier_setting age_tier NOT NULL, -- The effective age tier for content generation/filtering
    status story_status DEFAULT 'draft',
    collaboration_mode VARCHAR(50) NOT NULL, -- e.g., 'solo_ai', 'multi_user_only'
    ending_preference VARCHAR(50), -- e.g., 'user_controlled', 'random'
    initial_style_preference TEXT,
    cover_art_url TEXT, -- Can be derived from premise or generated
    opening_music_theme_url TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    completed_at TIMESTAMPTZ,
    last_activity_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE story_segments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    story_id UUID NOT NULL REFERENCES stories(id) ON DELETE CASCADE,
    author_type segment_author_type NOT NULL,
    user_id UUID REFERENCES users(id) ON DELETE SET NULL, -- Null if AI authored
    sequence_number INTEGER NOT NULL, -- Order of the segment in the story
    content TEXT NOT NULL, -- The narrative text
    -- enhanced_content TEXT, -- Optional: if auto-fix is applied and original is kept
    content_hash TEXT, -- For detecting duplicate content or very minor changes
    visual_effects_data JSONB, -- Parameters for contextual visual effects
    timestamp TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT uq_story_segment_sequence UNIQUE (story_id, sequence_number),
    CONSTRAINT chk_author_user_id CHECK ( (author_type = 'ai' AND user_id IS NULL) OR (author_type = 'user' AND user_id IS NOT NULL) )
);
-- Consider adding a GIN index on 'content' for full-text search:
-- CREATE INDEX idx_story_segments_content_fts ON story_segments USING GIN (to_tsvector('english', content));


CREATE TABLE media_assets (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    story_id UUID REFERENCES stories(id) ON DELETE CASCADE, -- Optional, for story-level assets like cover
    story_segment_id UUID REFERENCES story_segments(id) ON DELETE CASCADE, -- Most assets tied to a segment
    uploader_user_id UUID REFERENCES users(id) ON DELETE SET NULL, -- If user-uploaded
    asset_type media_type NOT NULL,
    asset_url TEXT NOT NULL, -- URL in object storage
    thumbnail_url TEXT,
    mime_type VARCHAR(100),
    file_size_bytes BIGINT,
    metadata JSONB, -- e.g., image dimensions, video duration, AI prompt used
    generated_by_ai_model_name VARCHAR(100),
    age_appropriateness_scan_status verification_status DEFAULT 'pending',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT chk_media_link CHECK (story_id IS NOT NULL OR story_segment_id IS NOT NULL)
);

CREATE TABLE story_collaborators (
    story_id UUID NOT NULL REFERENCES stories(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    role collaboration_role NOT NULL DEFAULT 'author',
    joined_at TIMESTAMPTZ DEFAULT NOW(),
    last_contribution_at TIMESTAMPTZ,
    is_turn BOOLEAN DEFAULT FALSE, -- For turn-based collaboration
    PRIMARY KEY (story_id, user_id)
);

CREATE TABLE digital_books (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    story_id UUID UNIQUE NOT NULL REFERENCES stories(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    cover_art_url TEXT,
    book_asset_url TEXT NOT NULL, -- URL to the compiled interactive book
    format VARCHAR(50) DEFAULT 'interactive_html', -- e.g., 'pdf', 'epub'
    page_count INTEGER,
    word_count INTEGER,
    creation_status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'generating', 'completed', 'failed'
    created_at TIMESTAMPTZ DEFAULT NOW(),
    published_at TIMESTAMPTZ
);

CREATE TABLE user_story_bookmarks (
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    story_id UUID NOT NULL REFERENCES stories(id) ON DELETE CASCADE,
    bookmarked_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (user_id, story_id)
);

CREATE TABLE chat_messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    story_id UUID NOT NULL REFERENCES stories(id) ON DELETE CASCADE, -- Chat is per story
    sender_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    message_content TEXT NOT NULL,
    sent_at TIMESTAMPTZ DEFAULT NOW(),
    is_moderated BOOLEAN DEFAULT FALSE,
    moderation_notes TEXT
);
-- CREATE INDEX idx_chat_messages_story_sent ON chat_messages (story_id, sent_at DESC);

CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    recipient_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    type notification_type NOT NULL,
    message TEXT NOT NULL,
    related_entity_type VARCHAR(50), -- e.g., 'story', 'user', 'segment'
    related_entity_id UUID,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    read_at TIMESTAMPTZ
);
-- CREATE INDEX idx_notifications_recipient_created ON notifications (recipient_user_id, created_at DESC);

CREATE TABLE content_reports (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    reporter_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    reported_content_type VARCHAR(50) NOT NULL, -- e.g., 'story_segment', 'chat_message', 'media_asset', 'user_profile'
    reported_content_id UUID NOT NULL, -- ID of the reported item
    story_id UUID REFERENCES stories(id) ON DELETE SET NULL, -- Context if applicable
    reason TEXT NOT NULL,
    status VARCHAR(50) DEFAULT 'pending_review', -- 'pending_review', 'action_taken', 'dismissed'
    admin_reviewer_id UUID REFERENCES users(id) ON DELETE SET NULL,
    action_taken TEXT,
    reported_at TIMESTAMPTZ DEFAULT NOW(),
    reviewed_at TIMESTAMPTZ
);

-- Indexes (Examples - more would be needed based on query patterns)
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_stories_creator_id ON stories(creator_id);
CREATE INDEX idx_stories_status ON stories(status);
CREATE INDEX idx_story_segments_story_id ON story_segments(story_id);
CREATE INDEX idx_media_assets_story_segment_id ON media_assets(story_segment_id);
CREATE INDEX idx_story_collaborators_user_id ON story_collaborators(user_id);
CREATE INDEX idx_notifications_recipient_unread ON notifications(recipient_user_id, is_read) WHERE is_read = FALSE;

-- Functions to update `updated_at` timestamps (Optional, can be handled by ORM or application logic)
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to tables
-- CREATE TRIGGER set_timestamp_users BEFORE UPDATE ON users FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();
-- CREATE TRIGGER set_timestamp_stories BEFORE UPDATE ON stories FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();
-- ... and so on for other tables with updated_at

```

**Key Considerations and Explanations:**

1.  **UUIDs for Primary Keys:** Good for distributed systems, prevents ID guessing, and allows for easier merging if systems are ever combined.
2.  **`TIMESTAMPTZ`:** Always use timestamp with time zone for dates and times to avoid ambiguity.
3.  **`JSONB`:** Used for flexible fields like `preferences`, `visual_effects_data`, `submitted_data` (for age verification), `metadata` (for media assets). It's binary, efficient, and indexable.
4.  **ENUM Types:** Enforce data integrity for fields with a predefined set of values (e.g., `age_tier`, `story_status`).
5.  **Foreign Keys & Relationships:**
    *   `ON DELETE CASCADE`: If a parent record is deleted, related child records are also deleted (e.g., deleting a story deletes its segments).
    *   `ON DELETE SET NULL`: If a parent record is deleted, the foreign key in the child record is set to NULL (e.g., if a user who authored a segment is deleted, `story_segments.user_id` becomes NULL, but the AI segment remains).
    *   `ON DELETE RESTRICT`: Prevents deletion of a parent record if child records exist (e.g., can't delete a user if they are the `creator_id` of a story, unless stories are first reassigned or deleted).
6.  **`story_segments.user_id` Nullable:** To allow for AI-authored segments. The `author_type` field clarifies who created it. The `CHECK` constraint enforces consistency.
7.  **`media_assets` Table:** Centralizes all generated or uploaded media. Can be linked to a whole story (e.g., cover art) or a specific segment.
8.  **`story_collaborators`:** A join table to manage many-to-many relationships between users and stories for collaboration.
9.  **`parental_links`:** Manages connections between parent and child accounts.
10. **`story_premises_library`:** Stores the predefined story starters.
11. **`chat_messages` & `notifications`:** Essential for communication and user engagement.
12. **`content_reports`:** For moderation and user safety.
13. **Indexes:** Examples are provided. More specific indexes would be added based on common query patterns identified during development and performance testing (e.g., on `username`, `genre`, `themes` if heavily filtered on).
14. **`updated_at` Trigger:** A common pattern to automatically update the `updated_at` field. This can also be handled at the application or ORM level.

This schema is a comprehensive starting point. It would likely evolve as specific implementation details and query needs become clearer.